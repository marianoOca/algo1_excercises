        -:    0:Source:c:/mingw/lib/gcc/mingw32/6.3.0/include/c++/bits/stl_construct.h
        -:    0:Graph:C:\Users\maria\Desktop\Taller\Algoritmos I\Clase7\cmake-build-debug-coverage\lib\googletest-master\googlemock\gtest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:C:\Users\maria\Desktop\Taller\Algoritmos I\Clase7\cmake-build-debug-coverage\lib\googletest-master\googlemock\gtest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// nonstandard construct and destroy functions -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2001-2016 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/*
        -:   26: *
        -:   27: * Copyright (c) 1994
        -:   28: * Hewlett-Packard Company
        -:   29: *
        -:   30: * Permission to use, copy, modify, distribute and sell this software
        -:   31: * and its documentation for any purpose is hereby granted without fee,
        -:   32: * provided that the above copyright notice appear in all copies and
        -:   33: * that both that copyright notice and this permission notice appear
        -:   34: * in supporting documentation.  Hewlett-Packard Company makes no
        -:   35: * representations about the suitability of this software for any
        -:   36: * purpose.  It is provided "as is" without express or implied warranty.
        -:   37: *
        -:   38: *
        -:   39: * Copyright (c) 1996,1997
        -:   40: * Silicon Graphics Computer Systems, Inc.
        -:   41: *
        -:   42: * Permission to use, copy, modify, distribute and sell this software
        -:   43: * and its documentation for any purpose is hereby granted without fee,
        -:   44: * provided that the above copyright notice appear in all copies and
        -:   45: * that both that copyright notice and this permission notice appear
        -:   46: * in supporting documentation.  Silicon Graphics makes no
        -:   47: * representations about the suitability of this software for any
        -:   48: * purpose.  It is provided "as is" without express or implied warranty.
        -:   49: */
        -:   50:
        -:   51:/** @file bits/stl_construct.h
        -:   52: *  This is an internal header file, included by other library headers.
        -:   53: *  Do not attempt to use it directly. @headername{memory}
        -:   54: */
        -:   55:
        -:   56:#ifndef _STL_CONSTRUCT_H
        -:   57:#define _STL_CONSTRUCT_H 1
        -:   58:
        -:   59:#include <new>
        -:   60:#include <bits/move.h>
        -:   61:#include <ext/alloc_traits.h>
        -:   62:
        -:   63:namespace std _GLIBCXX_VISIBILITY(default)
        -:   64:{
        -:   65:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   66:
        -:   67:  /**
        -:   68:   * Constructs an object in existing memory by invoking an allocated
        -:   69:   * object's constructor with an initializer.
        -:   70:   */
        -:   71:#if __cplusplus >= 201103L
        -:   72:  template<typename _T1, typename... _Args>
        -:   73:    inline void
        3:   74:    _Construct(_T1* __p, _Args&&... __args)
    $$$$$:   74-block  0
        1:   74-block  1
    $$$$$:   74-block  2
    $$$$$:   74-block  3
    $$$$$:   74-block  4
    $$$$$:   74-block  5
    $$$$$:   74-block  6
    $$$$$:   74-block  7
        2:   74-block  8
        3:   75:    { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
    $$$$$:   75-block  0
    $$$$$:   75-block  1
    $$$$$:   75-block  2
    $$$$$:   75-block  3
    $$$$$:   75-block  4
    %%%%%:   75-block  5
    %%%%%:   75-block  6
        1:   75-block  7
        1:   75-block  8
    $$$$$:   75-block  9
    $$$$$:   75-block 10
    $$$$$:   75-block 11
    $$$$$:   75-block 12
    $$$$$:   75-block 13
    $$$$$:   75-block 14
    %%%%%:   75-block 15
    $$$$$:   75-block 16
    $$$$$:   75-block 17
    $$$$$:   75-block 18
    $$$$$:   75-block 19
    $$$$$:   75-block 20
    $$$$$:   75-block 21
    $$$$$:   75-block 22
    $$$$$:   75-block 23
    $$$$$:   75-block 24
    $$$$$:   75-block 25
    $$$$$:   75-block 26
    $$$$$:   75-block 27
    $$$$$:   75-block 28
    $$$$$:   75-block 29
    %%%%%:   75-block 30
    $$$$$:   75-block 31
    $$$$$:   75-block 32
    $$$$$:   75-block 33
    $$$$$:   75-block 34
    $$$$$:   75-block 35
    %%%%%:   75-block 36
        2:   75-block 37
        2:   75-block 38
        2:   75-block 39
    $$$$$:   75-block 40
        2:   75-block 41
    %%%%%:   75-block 42
        -:   76:#else
        -:   77:  template<typename _T1, typename _T2>
        -:   78:    inline void
        -:   79:    _Construct(_T1* __p, const _T2& __value)
        -:   80:    {
        -:   81:      // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:   82:      // 402. wrong new expression in [some_]allocator::construct
        -:   83:      ::new(static_cast<void*>(__p)) _T1(__value);
        -:   84:    }
        -:   85:#endif
        -:   86:
        -:   87:  /**
        -:   88:   * Destroy the object pointed to by a pointer type.
        -:   89:   */
        -:   90:  template<typename _Tp>
        -:   91:    inline void
        5:   92:    _Destroy(_Tp* __pointer)
    $$$$$:   92-block  0
    $$$$$:   92-block  1
    $$$$$:   92-block  2
    $$$$$:   92-block  3
    $$$$$:   92-block  4
        5:   92-block  5
    $$$$$:   92-block  6
        5:   93:    { __pointer->~_Tp(); }
    $$$$$:   93-block  0
    $$$$$:   93-block  1
    $$$$$:   93-block  2
    $$$$$:   93-block  3
    $$$$$:   93-block  4
        5:   93-block  5
    $$$$$:   93-block  6
        -:   94:
        -:   95:  template<bool>
        -:   96:    struct _Destroy_aux
        -:   97:    {
        -:   98:      template<typename _ForwardIterator>
        -:   99:        static void
       98:  100:        __destroy(_ForwardIterator __first, _ForwardIterator __last)
    $$$$$:  100-block  0
        2:  100-block  1
       45:  100-block  2
    $$$$$:  100-block  3
    $$$$$:  100-block  4
        6:  100-block  5
       45:  100-block  6
        -:  101:	{
      103:  102:	  for (; __first != __last; ++__first)
    $$$$$:  102-block  0
        2:  102-block  1
       45:  102-block  2
    $$$$$:  102-block  3
    $$$$$:  102-block  4
       11:  102-block  5
       45:  102-block  6
        5:  103:	    std::_Destroy(std::__addressof(*__first));
    $$$$$:  103-block  0
    $$$$$:  103-block  1
    $$$$$:  103-block  2
    $$$$$:  103-block  3
    $$$$$:  103-block  4
        5:  103-block  5
    $$$$$:  103-block  6
       98:  104:	}
        -:  105:    };
        -:  106:
        -:  107:  template<>
        -:  108:    struct _Destroy_aux<true>
        -:  109:    {
        -:  110:      template<typename _ForwardIterator>
        -:  111:        static void
       46:  112:        __destroy(_ForwardIterator, _ForwardIterator) { }
        4:  112-block  0
        1:  112-block  1
        2:  112-block  2
       21:  112-block  3
       17:  112-block  4
    $$$$$:  112-block  5
    $$$$$:  112-block  6
    $$$$$:  112-block  7
        1:  112-block  8
        -:  113:    };
        -:  114:
        -:  115:  /**
        -:  116:   * Destroy a range of objects.  If the value_type of the object has
        -:  117:   * a trivial destructor, the compiler should optimize all of this
        -:  118:   * away, otherwise the objects' destructors must be invoked.
        -:  119:   */
        -:  120:  template<typename _ForwardIterator>
        -:  121:    inline void
      144:  122:    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
    $$$$$:  122-block  0
        2:  122-block  1
        4:  122-block  2
        1:  122-block  3
        2:  122-block  4
       21:  122-block  5
       17:  122-block  6
       45:  122-block  7
    $$$$$:  122-block  8
    $$$$$:  122-block  9
    $$$$$:  122-block 10
    $$$$$:  122-block 11
    $$$$$:  122-block 12
        6:  122-block 13
       45:  122-block 14
        1:  122-block 15
        -:  123:    {
        -:  124:      typedef typename iterator_traits<_ForwardIterator>::value_type
        -:  125:                       _Value_type;
      144:  126:      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
    $$$$$:  126-block  0
        2:  126-block  1
        4:  126-block  2
        1:  126-block  3
        2:  126-block  4
       21:  126-block  5
       17:  126-block  6
       45:  126-block  7
    $$$$$:  126-block  8
    $$$$$:  126-block  9
    $$$$$:  126-block 10
    $$$$$:  126-block 11
    $$$$$:  126-block 12
        6:  126-block 13
       45:  126-block 14
        1:  126-block 15
        -:  127:	__destroy(__first, __last);
      144:  128:    }
        -:  129:
        -:  130:  /**
        -:  131:   * Destroy a range of objects using the supplied allocator.  For
        -:  132:   * nondefault allocators we do not optimize away invocation of 
        -:  133:   * destroy() even if _Tp has a trivial destructor.
        -:  134:   */
        -:  135:
        -:  136:  template<typename _ForwardIterator, typename _Allocator>
        -:  137:    void
        -:  138:    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
        -:  139:	     _Allocator& __alloc)
        -:  140:    {
        -:  141:      typedef __gnu_cxx::__alloc_traits<_Allocator> __traits;
        -:  142:      for (; __first != __last; ++__first)
        -:  143:	__traits::destroy(__alloc, std::__addressof(*__first));
        -:  144:    }
        -:  145:
        -:  146:  template<typename _ForwardIterator, typename _Tp>
        -:  147:    inline void
      144:  148:    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
    $$$$$:  148-block  0
        2:  148-block  1
        4:  148-block  2
        1:  148-block  3
        2:  148-block  4
       21:  148-block  5
       17:  148-block  6
       45:  148-block  7
    $$$$$:  148-block  8
    $$$$$:  148-block  9
    $$$$$:  148-block 10
    $$$$$:  148-block 11
    $$$$$:  148-block 12
        6:  148-block 13
       45:  148-block 14
        1:  148-block 15
        -:  149:	     allocator<_Tp>&)
        -:  150:    {
      144:  151:      _Destroy(__first, __last);
    $$$$$:  151-block  0
        2:  151-block  1
        4:  151-block  2
        1:  151-block  3
        2:  151-block  4
       21:  151-block  5
       17:  151-block  6
       45:  151-block  7
    $$$$$:  151-block  8
    $$$$$:  151-block  9
    $$$$$:  151-block 10
    $$$$$:  151-block 11
    $$$$$:  151-block 12
        6:  151-block 13
       45:  151-block 14
        1:  151-block 15
      144:  152:    }
        -:  153:
        -:  154:_GLIBCXX_END_NAMESPACE_VERSION
        -:  155:} // namespace std
        -:  156:
        -:  157:#endif /* _STL_CONSTRUCT_H */
        -:  158:
